#!/usr/bin/env node

const fs = require('fs');
const program = require('commander');
const ethers = require('ethers');
const inquirer = require('inquirer');
const { cyan, gray, yellow, red } = require('chalk');

async function distributeSNX({
	providerUrl,
	network,
	dataFile,
	totalRewards,
}) {
	// Validate input parameters
	if (!network) throw new Error('Please specify a network');
	if (!providerUrl) throw new Error('Please specify a provider');
	if (!totalRewards) throw new Error('Please specify the total amount of SNX rewards to be distributed');
	if (isNaN(totalRewards)) throw new Error('Invalid total rewards');
	if (!dataFile) throw new Error('Please specify a JSON input file');
	if (!fs.existsSync(dataFile)) throw new Error(`No file at ${dataFile}`);

	// Parse data
	const data = JSON.parse(fs.readFileSync(dataFile));

	// Calculate the reward multiplier
	// 1 escrowed SNX does not necessarily translate 1 rewarded SNX. For example,
	// if 100000 SNX is to be rewarded, and 200000 SNX were escrowed, each escrowed SNX
	// corresponds to 0.5 rewarded SNX.
	const k = ethers.BigNumber.from('1000000');
	const totalRewardsWei = ethers.utils.parseEther(totalRewards);
	const rewardMultiplier = k.mul(totalRewardsWei).div(ethers.BigNumber.from(data.totals.escrowedSNX));

	// Track distribution info in the data file
	if (!data.totals.distributedSNX) data.totals.distributedSNX = '0';
	if (!data.totals.processedAccounts) data.totals.processedAccounts = '0';
	if (!data.processedAccounts) data.processedAccounts = {};
	fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));

	// Print data and confirm before continuing
	console.log('');
	console.log(cyan('Please review this information before continuing:'));
	console.log(gray('================================================================================'));
	console.log(yellow('* network:', network));
	console.log(yellow('* provider:', providerUrl));
	console.log(yellow('* Target accounts:', data.totals.numWithdrawers));
	console.log(yellow('* Processed accounts:', data.totals.processedAccounts));
	console.log(yellow('* SNX to distribute:', totalRewards));
	console.log(yellow('* SNX already distributed:', ethers.utils.formatEther(data.totals.distributedSNX)));
	console.log(yellow('* SNX in escrow:', ethers.utils.formatEther(data.totals.escrowedSNX)));
	console.log(yellow('* reward multiplier:', ethers.utils.formatUnits(rewardMultiplier, 'mwei')));
	console.log(gray('================================================================================'));
	console.log('\n');

	const { confirmation } = await inquirer.prompt([
		{
			type: 'confirm',
			name: 'confirmation',
			message: 'Continue?',
		},
	]);
	if (!confirmation) {
		console.log(gray('User cancelled'));
		process.exit(0);
	}

	// Sweep all accounts
	const accounts = Object.keys(data.accounts);
	const numAccounts = accounts.length;
	for (let i = 0; i < numAccounts; i++) {
		const account = accounts[i];
		console.log(gray(`  > Processing account ${i + 1}/${numAccounts} - ${account}`));

		if (!data.processedAccounts[account]) {

		}
	}
}

program
	.description('Distributes L2 trial SNX rewards accourding to calculated scores')
	.option('--network <value>', 'Network to use', 'goerli')
	.option('--provider-url <value>', 'The http provider to use for communicating with the blockchain')
	.option('--data-file <value>', 'The json file where target accounts are stored (generated by calculate-l2-trial-scores.js)')
	.option('--total-rewards <value>', 'The total amount of SNX to be distributed', '200000')
	.action(async (...args) => {
		try {
			await distributeSNX(...args);
		} catch (err) {
			console.error(red(err));
			console.log(err.stack);

			process.exitCode = 1;
		}
	});

program.parse(process.argv);
