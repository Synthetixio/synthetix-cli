#!/usr/bin/env node
require('dotenv').config();

const { wrap } = require('synthetix');
const fs = require('fs');
const path = require('path');
const program = require('commander');
const ethers = require('ethers');
const inquirer = require('inquirer');
const chalk = require('chalk');
const { getContract } = require('../utils/getContract');
const { setupProvider } = require('../utils/setupProvider');

async function airdropWETH({
	providerUrl,
	network,
	dataFile,
	amountToDrop,
	deploymentPath,
	wethAddress,
	gasPrice,
	yes,
	dryRun,
}) {
	// Validate input parameters
	if (!network) throw new Error('Please specify a network');
	if (!providerUrl) throw new Error('Please specify a provider');
	if (!amountToDrop) throw new Error('Please specify the amount to airdrop to each account');
	if (isNaN(amountToDrop)) throw new Error('Invalid amount to drop');
	if (!dataFile) throw new Error('Please specify a JSON input file');
	if (!fs.existsSync(dataFile)) throw new Error(`No file at ${dataFile}`);
	if (!wethAddress) throw new Error('Please specify the target WETH address');
	if (!ethers.utils.isAddress(wethAddress)) throw new Error('Invalid WETH address');

	// Evaluate deployment path
	const { getPathToNetwork } = wrap({
		network,
		useOvm: true,
		fs,
		path,
	});
	if (!deploymentPath) {
		deploymentPath = getPathToNetwork({ network, useOvm: true });
	}

	// Prepare provider and signer
	const privateKey = process.env.PRIVATE_KEY;
	const { wallet, provider } = setupProvider({ providerUrl, privateKey });
	const signerAddress = await wallet.getAddress();

	// Connect to contracts
	const abi = JSON.parse(fs.readFileSync('src/abis/common/ERC20.json', 'utf8'));
	const WETH = new ethers.Contract(wethAddress, abi, wallet);

	// TODO: Abort if signer will not have enough balance
	// Verify signer WETH balance
	const balance = await WETH.balanceOf(signerAddress);
	console.log('balance', balance);

	// 
}

program
	.description('Airdrops L2 WETH on a list of accounts')
	.option('--network <value>', 'Network to use', 'kovan')
	.option('--provider-url <value>', 'The http provider to use for communicating with the blockchain')
	.option('--deployment-path <value>', 'Specify the path to the deployment data directory')
	.option('--data-file <value>', 'The json file where target accounts are stored (generated by get-all-l2-active-snx-holders.js)')
	.option('--amount-to-drop <value>', 'The total amount of WETH to be airdroped to each account', '0.05')
	.option('--weth-address <value>', 'The address of the WETH token in L2')
	.option('--gas-price <value>', 'Gas price to set when performing transfers', '0')
	.option('--yes', 'Skip all confirmations', false)
	.option('--dry-run', 'Avoids sending any transaction', false)
	.action(async (...args) => {
		try {
			await airdropWETH(...args);
		} catch (err) {
			console.error(chalk.red(err));
			console.log(err.stack);

			process.exitCode = 1;
		}
	});

program.parse(process.argv);
